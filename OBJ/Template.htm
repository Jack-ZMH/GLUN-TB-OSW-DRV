<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Dec 16 17:10:36 2023
<BR><P>
<H3>Maximum Stack Usage =        536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[48]">C1X2G_Chenck_Fun</a> from main.o(i.C1X2G_Chenck_Fun) referenced from main.o(.constdata)
 <LI><a href="#[49]">C1X2G_StateSwitch</a> from main.o(i.C1X2G_StateSwitch) referenced from main.o(.constdata)
 <LI><a href="#[0]">Cmd_PreproccessCallBack</a> from uart_cmd.o(i.Cmd_PreproccessCallBack) referenced 2 times from uart_cmd.o(.data)
 <LI><a href="#[4a]">D2X2B_Chenck_Fun</a> from main.o(i.D2X2B_Chenck_Fun) referenced from main.o(.constdata)
 <LI><a href="#[4b]">D2X2B_StateSwitch</a> from main.o(i.D2X2B_StateSwitch) referenced from main.o(.constdata)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[31]">DMA1_Stream7_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[35]">DMA2_Stream0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[36]">DMA2_Stream1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[37]">DMA2_Stream2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[39]">DMA2_Stream4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from bsp_key.o(i.EXTI2_IRQHandler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from bsp_key.o(i.EXTI3_IRQHandler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1e]">EXTI9_5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[41]">FPU_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[27]">I2C1_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[26]">I2C1_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[29]">I2C2_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[28]">I2C2_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[40]">I2C3_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3f]">I2C3_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[4c]">M1X1_Chenck_Fun</a> from main.o(i.M1X1_Chenck_Fun) referenced from main.o(.constdata)
 <LI><a href="#[4d]">M1X1_StateSwitch</a> from main.o(i.M1X1_StateSwitch) referenced from main.o(.constdata)
 <LI><a href="#[4e]">M1X4_Chenck_Fun</a> from main.o(i.M1X4_Chenck_Fun) referenced from main.o(.constdata)
 <LI><a href="#[4f]">M1X4_StateSwitch</a> from main.o(i.M1X4_StateSwitch) referenced from main.o(.constdata)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3a]">OTG_FS_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[30]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2f]">RTC_Alarm_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[50]">S1X4_Chenck_Fun</a> from main.o(i.S1X4_Chenck_Fun) referenced from main.o(.constdata)
 <LI><a href="#[51]">S1X4_StateSwitch</a> from main.o(i.S1X4_StateSwitch) referenced from main.o(.constdata)
 <LI><a href="#[52]">S1X8_Chenck_Fun</a> from main.o(i.S1X8_Chenck_Fun) referenced from main.o(.constdata)
 <LI><a href="#[53]">S1X8_StateSwitch</a> from main.o(i.S1X8_StateSwitch) referenced from main.o(.constdata)
 <LI><a href="#[32]">SDIO_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2b]">SPI2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[34]">SPI3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[42]">SPI4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[43]">SPI5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[45]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f411xe.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[22]">TIM1_CC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[21]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[20]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[23]">TIM2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[24]">TIM3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[25]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[33]">TIM5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2c]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2d]">USART2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3e]">USART6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[46]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f411xe.o(.text)
 <LI><a href="#[47]">fputc</a> from usart.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[44]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[46]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[61]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ea]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[eb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ec]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[ed]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ee]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[5f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAllLetters
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAllDigits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[75]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractCommand
</UL>

<P><STRONG><a name="[72]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractCommand
</UL>

<P><STRONG><a name="[74]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_CmdFun
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
</UL>

<P><STRONG><a name="[76]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
</UL>

<P><STRONG><a name="[c2]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_CmdFun
</UL>

<P><STRONG><a name="[73]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
</UL>

<P><STRONG><a name="[5c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[62]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[f8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>Adc_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, adc.o(i.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Adc_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[65]"></a>Bsp_I2c_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, i2c_device.o(i.Bsp_I2c_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bsp_I2c_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>C1X2G_CHENCK</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_c1x2g.o(i.C1X2G_CHENCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = C1X2G_CHENCK &rArr; Latch_C1X2_StateB &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateA
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_C1X2_StateA
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_Chenck_Fun
</UL>

<P><STRONG><a name="[48]"></a>C1X2G_Chenck_Fun</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.C1X2G_Chenck_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = C1X2G_Chenck_Fun &rArr; C1X2G_CHENCK &rArr; Latch_C1X2_StateB &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_CHENCK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>C1X2G_GPIO_Init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, bsp_c1x2g.o(i.C1X2G_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = C1X2G_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[49]"></a>C1X2G_StateSwitch</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.C1X2G_StateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = C1X2G_StateSwitch &rArr; Latch_C1X2_StateB &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateA
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>CmdTable_Traversal</STRONG> (Thumb, 548 bytes, Stack size 88 bytes, uart_cmd.o(i.CmdTable_Traversal))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CmdTable_Traversal &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAllLetters
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAllDigits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractCommand
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[0]"></a>Cmd_PreproccessCallBack</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, uart_cmd.o(i.Cmd_PreproccessCallBack))
<BR>[Address Reference Count : 1]<UL><LI> uart_cmd.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>D2X2B_CHENCK</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_d2x2b.o(i.D2X2B_CHENCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = D2X2B_CHENCK &rArr; D2X2B_State_Bar &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Cross
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Bar
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_Chenck_Fun
</UL>

<P><STRONG><a name="[4a]"></a>D2X2B_Chenck_Fun</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.D2X2B_Chenck_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = D2X2B_Chenck_Fun &rArr; D2X2B_CHENCK &rArr; D2X2B_State_Bar &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_CHENCK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>D2X2B_GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bsp_d2x2b.o(i.D2X2B_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = D2X2B_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4b]"></a>D2X2B_StateSwitch</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.D2X2B_StateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = D2X2B_StateSwitch &rArr; D2X2B_State_Bar &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Cross
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Bar
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>D2X2B_State_Bar</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_d2x2b.o(i.D2X2B_State_Bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = D2X2B_State_Bar &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_CHENCK
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_StateSwitch
</UL>

<P><STRONG><a name="[7a]"></a>D2X2B_State_Cross</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_d2x2b.o(i.D2X2B_State_Cross))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = D2X2B_State_Cross &rArr; PCA_GPIO_ReadPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_CHENCK
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_StateSwitch
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_key.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_key.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[83]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_key.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxp_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad5175_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_GPIO_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_GPIO_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[e6]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxp_Init
</UL>

<P><STRONG><a name="[6e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxp_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad5175_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_GPIO_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_D
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_C
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_B
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_A
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P7
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P6
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P5
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_D
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_B
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_A
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateB
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateA
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P6
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP3
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateA
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Cross
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Bar
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_GPIO_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_GPIO_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_C1X2_StateA
</UL>

<P><STRONG><a name="[87]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[66]"></a>HAL_I2C_Init</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2c_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 744 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteForReg
</UL>

<P><STRONG><a name="[8c]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireMoreByteToReg
</UL>

<P><STRONG><a name="[84]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, i2c_device.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[90]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[93]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[95]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[91]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[85]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1086 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[94]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a2]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_UART_MspInit</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>KEY_GPIO_Init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bsp_key.o(i.KEY_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KEY_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[69]"></a>Latch_C1X2_StateA</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_c1x2g.o(i.Latch_C1X2_StateA))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_C1X2_StateA &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_CHENCK
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_StateSwitch
</UL>

<P><STRONG><a name="[6a]"></a>Latch_C1X2_StateB</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_c1x2g.o(i.Latch_C1X2_StateB))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_C1X2_StateB &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_CHENCK
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_StateSwitch
</UL>

<P><STRONG><a name="[ac]"></a>Latch_S1X4_COMP1</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, bsp_s1x4.o(i.Latch_S1X4_COMP1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X4_COMP1 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
</UL>

<P><STRONG><a name="[ad]"></a>Latch_S1X4_COMP2</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, bsp_s1x4.o(i.Latch_S1X4_COMP2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X4_COMP2 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
</UL>

<P><STRONG><a name="[ae]"></a>Latch_S1X4_COMP3</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, bsp_s1x4.o(i.Latch_S1X4_COMP3))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X4_COMP3 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
</UL>

<P><STRONG><a name="[af]"></a>Latch_S1X4_COMP4</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, bsp_s1x4.o(i.Latch_S1X4_COMP4))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X4_COMP4 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
</UL>

<P><STRONG><a name="[b0]"></a>Latch_S1X8_CHENCH</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bsp_s1x8.o(i.Latch_S1X8_CHENCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Latch_S1X8_CHENCH &rArr; NonLatch_S1X8_COM_P8 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P7
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P6
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P5
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P1
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P6
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_Chenck_Fun
</UL>

<P><STRONG><a name="[b1]"></a>Latch_S1X8_COM_P1</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, bsp_s1x8.o(i.Latch_S1X8_COM_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X8_COM_P1 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[b2]"></a>Latch_S1X8_COM_P2</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, bsp_s1x8.o(i.Latch_S1X8_COM_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X8_COM_P2 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[b3]"></a>Latch_S1X8_COM_P3</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, bsp_s1x8.o(i.Latch_S1X8_COM_P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X8_COM_P3 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[b4]"></a>Latch_S1X8_COM_P4</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, bsp_s1x8.o(i.Latch_S1X8_COM_P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X8_COM_P4 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[b5]"></a>Latch_S1X8_COM_P5</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, bsp_s1x8.o(i.Latch_S1X8_COM_P5))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X8_COM_P5 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[b6]"></a>Latch_S1X8_COM_P6</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, bsp_s1x8.o(i.Latch_S1X8_COM_P6))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X8_COM_P6 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[b7]"></a>Latch_S1X8_COM_P7</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, bsp_s1x8.o(i.Latch_S1X8_COM_P7))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X8_COM_P7 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[b8]"></a>Latch_S1X8_COM_P8</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, bsp_s1x8.o(i.Latch_S1X8_COM_P8))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Latch_S1X8_COM_P8 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[c1]"></a>Logic_CmdFun</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, uart_cmd.o(i.Logic_CmdFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Logic_CmdFun &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>M1X1_CHENCK</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_mxn.o(i.M1X1_CHENCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = M1X1_CHENCK &rArr; M1X1_StateB &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateB
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateA
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_Chenck_Fun
</UL>

<P><STRONG><a name="[4c]"></a>M1X1_Chenck_Fun</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.M1X1_Chenck_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = M1X1_Chenck_Fun &rArr; M1X1_CHENCK &rArr; M1X1_StateB &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_CHENCK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>M1X1_GPIO_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bsp_mxn.o(i.M1X1_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M1X1_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[c4]"></a>M1X1_StateA</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_mxn.o(i.M1X1_StateA))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M1X1_StateA &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_CHENCK
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateSwitch
</UL>

<P><STRONG><a name="[c5]"></a>M1X1_StateB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_mxn.o(i.M1X1_StateB))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M1X1_StateB &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_CHENCK
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateSwitch
</UL>

<P><STRONG><a name="[4d]"></a>M1X1_StateSwitch</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.M1X1_StateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = M1X1_StateSwitch &rArr; M1X1_StateB &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateB
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateA
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>M1X4_CHENCK</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_m1x4.o(i.M1X4_CHENCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = M1X4_CHENCK &rArr; NonLatching_M1X4State_D &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_D
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_C
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_B
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_A
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_D
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_B
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_A
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_Chenck_Fun
</UL>

<P><STRONG><a name="[4e]"></a>M1X4_Chenck_Fun</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.M1X4_Chenck_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = M1X4_Chenck_Fun &rArr; M1X4_CHENCK &rArr; NonLatching_M1X4State_D &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>M1X4_GPIO_Init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, bsp_m1x4.o(i.M1X4_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M1X4_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4f]"></a>M1X4_StateSwitch</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, main.o(i.M1X4_StateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = M1X4_StateSwitch &rArr; NonLatching_M1X4State_D &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_D
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_C
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_B
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_A
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_D
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_B
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_A
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>M1X4_State_A</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_m1x4.o(i.M1X4_State_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M1X4_State_A &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
</UL>

<P><STRONG><a name="[c9]"></a>M1X4_State_B</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_m1x4.o(i.M1X4_State_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M1X4_State_B &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
</UL>

<P><STRONG><a name="[ca]"></a>M1X4_State_C</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_m1x4.o(i.M1X4_State_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M1X4_State_C &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
</UL>

<P><STRONG><a name="[cb]"></a>M1X4_State_D</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_m1x4.o(i.M1X4_State_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M1X4_State_D &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>NonLatch_C1X2_StateA</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_c1x2g.o(i.NonLatch_C1X2_StateA))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_C1X2_StateA &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_CHENCK
</UL>

<P><STRONG><a name="[d1]"></a>NonLatch_S1X4_COMP1</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_s1x4.o(i.NonLatch_S1X4_COMP1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X4_COMP1 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
</UL>

<P><STRONG><a name="[d2]"></a>NonLatch_S1X4_COMP2</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_s1x4.o(i.NonLatch_S1X4_COMP2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X4_COMP2 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
</UL>

<P><STRONG><a name="[d3]"></a>NonLatch_S1X4_COMP3</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_s1x4.o(i.NonLatch_S1X4_COMP3))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X4_COMP3 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
</UL>

<P><STRONG><a name="[d4]"></a>NonLatch_S1X4_COMP4</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_s1x4.o(i.NonLatch_S1X4_COMP4))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X4_COMP4 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
</UL>

<P><STRONG><a name="[b9]"></a>NonLatch_S1X8_COM_P1</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_s1x8.o(i.NonLatch_S1X8_COM_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X8_COM_P1 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[ba]"></a>NonLatch_S1X8_COM_P2</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, bsp_s1x8.o(i.NonLatch_S1X8_COM_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X8_COM_P2 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[bb]"></a>NonLatch_S1X8_COM_P3</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_s1x8.o(i.NonLatch_S1X8_COM_P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X8_COM_P3 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[bc]"></a>NonLatch_S1X8_COM_P4</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_s1x8.o(i.NonLatch_S1X8_COM_P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X8_COM_P4 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[bd]"></a>NonLatch_S1X8_COM_P5</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_s1x8.o(i.NonLatch_S1X8_COM_P5))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X8_COM_P5 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[be]"></a>NonLatch_S1X8_COM_P6</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_s1x8.o(i.NonLatch_S1X8_COM_P6))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X8_COM_P6 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[bf]"></a>NonLatch_S1X8_COM_P7</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_s1x8.o(i.NonLatch_S1X8_COM_P7))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X8_COM_P7 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[c0]"></a>NonLatch_S1X8_COM_P8</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_s1x8.o(i.NonLatch_S1X8_COM_P8))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatch_S1X8_COM_P8 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
</UL>

<P><STRONG><a name="[cc]"></a>NonLatching_M1X4State_A</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, bsp_m1x4.o(i.NonLatching_M1X4State_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatching_M1X4State_A &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
</UL>

<P><STRONG><a name="[cd]"></a>NonLatching_M1X4State_B</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bsp_m1x4.o(i.NonLatching_M1X4State_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatching_M1X4State_B &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
</UL>

<P><STRONG><a name="[ce]"></a>NonLatching_M1X4State_C</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bsp_m1x4.o(i.NonLatching_M1X4State_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatching_M1X4State_C &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
</UL>

<P><STRONG><a name="[cf]"></a>NonLatching_M1X4State_D</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_m1x4.o(i.NonLatching_M1X4State_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NonLatching_M1X4State_D &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
</UL>

<P><STRONG><a name="[7f]"></a>PCA_GPIO_ReadPin</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_nxp9698.o(i.PCA_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PCA_GPIO_ReadPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteForReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P7
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P6
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P5
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P1
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P6
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Cross
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>READ_TwoPin</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_nxp9698.o(i.READ_TwoPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteForReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_D
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_C
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_B
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_A
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P7
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P6
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P5
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_D
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_B
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_A
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateB
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateA
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P6
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP3
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateA
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Bar
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_C1X2_StateA
</UL>

<P><STRONG><a name="[d5]"></a>ReadByteForReg</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, bsp_nxp9698.o(i.ReadByteForReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TwoPin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_GPIO_ReadPin
</UL>

<P><STRONG><a name="[d6]"></a>S1X4_CHENCK</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bsp_s1x4.o(i.S1X4_CHENCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = S1X4_CHENCK &rArr; NonLatch_S1X4_COMP4 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP3
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_Chenck_Fun
</UL>

<P><STRONG><a name="[50]"></a>S1X4_Chenck_Fun</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.S1X4_Chenck_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = S1X4_Chenck_Fun &rArr; S1X4_CHENCK &rArr; NonLatch_S1X4_COMP4 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>S1X4_GPIO_Init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, bsp_s1x4.o(i.S1X4_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = S1X4_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[51]"></a>S1X4_StateSwitch</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, main.o(i.S1X4_StateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = S1X4_StateSwitch &rArr; NonLatch_S1X4_COMP4 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP3
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>S1X8_Chenck_Fun</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.S1X8_Chenck_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = S1X8_Chenck_Fun &rArr; Latch_S1X8_CHENCH &rArr; NonLatch_S1X8_COM_P8 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>S1X8_StateSwitch</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, main.o(i.S1X8_StateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = S1X8_StateSwitch &rArr; NonLatch_S1X8_COM_P8 &rArr; READ_TwoPin &rArr; ReadByteForReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P7
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P6
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P5
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P1
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P6
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>Stm32_Clock_Init</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>TIM4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART1_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>WireMoreByteToReg</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, bsp_nxp9698.o(i.WireMoreByteToReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WireMoreByteToReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fa]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[67]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_CHENCK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_D
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_C
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_B
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_A
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P7
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P6
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P5
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_D
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_B
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_A
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_CHENCK
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateB
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateA
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_CHENCK
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_CmdFun
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P6
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P1
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_CHENCH
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP3
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateA
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Cross
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Bar
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_CHENCK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_CHENCK
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2c_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X8_StateSwitch
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_StateSwitch
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_StateSwitch
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateSwitch
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_StateSwitch
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_StateSwitch
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_C1X2_StateA
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[fb]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[fc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[fd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[fe]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[de]"></a>ad5175_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ad517x_lib.o(i.ad5175_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ad5175_Init &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[df]"></a>bsp_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_Init &rArr; KEY_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxp_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad5175_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S1X4_GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_GPIO_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_GPIO_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2c_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad5175_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_D
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_C
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_B
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatching_M1X4State_A
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P7
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P6
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P5
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X8_COM_P1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_S1X4_COMP1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_D
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_B
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X4_State_A
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateB
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1X1_StateA
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P6
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X8_COM_P1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP3
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_S1X4_COMP1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Latch_C1X2_StateA
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Cross
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2X2B_State_Bar
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonLatch_C1X2_StateA
</UL>

<P><STRONG><a name="[e3]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[47]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 162 bytes, Stack size 344 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = main &rArr; Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireMoreByteToReg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_CmdFun
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1X2G_CHENCK
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e0]"></a>nxp_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bsp_nxp9698.o(i.nxp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nxp_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[e4]"></a>uart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[82]"></a>ADC_Init</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[96]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[97]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a7]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[8a]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[8d]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[8f]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[88]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[a9]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[8b]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[8e]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[71]"></a>extractCommand</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uart_cmd.o(i.extractCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extractCommand &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
</UL>

<P><STRONG><a name="[78]"></a>isAllDigits</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart_cmd.o(i.isAllDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isAllDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
</UL>

<P><STRONG><a name="[77]"></a>isAllLetters</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart_cmd.o(i.isAllLetters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isAllLetters
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdTable_Traversal
</UL>

<P><STRONG><a name="[dc]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
